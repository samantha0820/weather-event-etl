# app.py

import streamlit as st
import pandas as pd
import os

# --- Page Config ---
st.set_page_config(
    page_title="5-Day Weather & Event Recommendations",
    page_icon="☀️",
    layout="wide"
)

# --- Load Data (with cache) ---
@st.cache_data(ttl=3600)  # cache for 1 day
def load_data():
    weather = pd.read_csv("output/weather_forecast.csv")
    event = pd.read_csv("output/events_forecast.csv")
    return weather, event

weather_df, event_df = load_data()

# --- Sidebar: Show Last Update Time ---
try:
    last_update_time = max(
        os.path.getmtime("output/weather_forecast.csv"),
        os.path.getmtime("output/events_forecast.csv")
    )
    st.sidebar.write(f"🔄 Data last updated: {pd.to_datetime(last_update_time, unit='s')}")
except FileNotFoundError:
    st.sidebar.write("⚠️ Data not found.")

# --- App Title ---
st.title("🌟 5-Day Weather & Event Recommendations")

# --- Weather Section ---
st.header("☀️ Weather Summary")

weather_df["date"] = pd.to_datetime(weather_df["date"]).dt.date
available_weather_dates = sorted(weather_df["date"].unique())

selected_weather_date = st.selectbox(
    "Select a Date to View Weather:",
    available_weather_dates,
    key="weather_select"
)

selected_weather = weather_df[weather_df["date"] == selected_weather_date].iloc[0]

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Temperature (°C)", f"{selected_weather['temperature_celsius']} (Feels like {selected_weather['feels_like']})")
    st.metric("Humidity (%)", selected_weather['humidity'])
with col2:
    st.metric("Pressure (hPa)", selected_weather['pressure'])
    st.metric("Wind Speed (m/s)", selected_weather['wind_speed'])
with col3:
    st.metric("Cloudiness (%)", selected_weather['cloudiness'])
    st.metric("Chance of Rain", f"{selected_weather['precipitation_chance'] * 100:.0f}%")

st.write(f"**Weather:** {selected_weather['weather_main']} - {selected_weather['weather_description']}")

st.divider()

# --- Events Section ---
st.header("🎉 5-Day Events")

event_df["event_date"] = pd.to_datetime(event_df["event_date"])
available_dates = sorted(event_df["event_date"].dt.date.unique())

selected_date = st.selectbox("Select a Date for Events:", available_dates)
recommendation_filter = st.selectbox(
    "Filter by Recommendation:",
    ["All", "Recommended (Indoor)", "Recommended (Outdoor)", "Recommended (Indoor OK)", "Not Recommended (Outdoor)"]
)

filtered_df = event_df[event_df["event_date"].dt.date == selected_date]

if recommendation_filter != "All":
    filtered_df = filtered_df[filtered_df["recommendation"] == recommendation_filter]

filtered_df = filtered_df.sort_values(by="event_time")

st.subheader(f"📅 Events on {selected_date.strftime('%B %d, %Y')}")

if filtered_df.empty:
    st.info("No events available for this date.")
else:
    for _, row in filtered_df.iterrows():
        with st.container():
            image_col, detail_col = st.columns([1, 2])
            with image_col:
                if pd.notna(row.get("image_url")):
                    st.image(row["image_url"], width=180)
                else:
                    st.write("(No Image Available)")
            with detail_col:
                st.markdown(f"### [{row['event_name']}]({row['event_url']})")
                st.write(f"📍 **Venue:** {row['venue']}, {row['city']}")
                st.write(f"🕒 **Time:** {row['event_time']}")
                price_text = (
                    f"${row['price_min']:.2f} - ${row['price_max']:.2f}"
                    if pd.notna(row['price_min']) and pd.notna(row['price_max']) else "N/A"
                )
                st.write(f"💲 **Price:** {price_text}")
                st.write(f"🏷️ **Recommendation:** {row['recommendation']}")
            st.divider()

# --- Footer ---
st.caption("\u00a9 Generated by Samantha Wang")